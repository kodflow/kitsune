name: Main

on:
  push:
    branches: main

jobs:
  Binary:
    outputs:
      version: ${{ steps.semver.outputs.next }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Set up Go
      uses: actions/setup-go@v4
    - name: Build binaries for all platforms
      run: make build project
    - name: Get next version
      id: semver
      uses: ietf-tools/semver-action@v1
      with:
        token: ${{ github.token }}
        branch: main
        skipInvalidTags: true
        
    - name: Build Kitsune Framework
      uses: ncipollo/release-action@v1
      with:
        name: Kitsune Framework
        makeLatest: true
        tag: ${{ steps.semver.outputs.next }}
        artifacts: ".generated/bin/*,.generated/services/*"
        allowUpdates: true
        replacesArtifacts: true
        removeArtifacts: true
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Create or update 'latest' tag
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const ref = `tags/latest`;
          const sha = context.sha;
    
          try {
            const octokit = new Octokit({
              auth: '${{ secrets.GITHUB_TOKEN }}'
            })

            await octokit.request('DELETE /repos/{owner}/{repo}/git/refs/{ref}', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: ref,
              headers: {
                'X-GitHub-Api-Version': '2022-11-28'
              }
            })
          } catch (error) {
            if (error.status !== 404) {
              throw error;
            }
            // Ignore if the 'latest' tag does not exist
          }
          /*
          await github.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref,
            sha
          });
          */

  Services:
    needs: Binary
    runs-on: ubuntu-latest
    strategy:
      matrix:
        binary_name:
          - gateway
          - cache
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Build Image ${{ matrix.binary_name }}
      uses: docker/build-push-action@v4
      with:
        file: .github/build/Dockerfile.service
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        build-args: |
          BINARY_NAME=${{ matrix.binary_name }}
        tags: |
          kodmain/kitsune.${{ matrix.binary_name }}:latest
          kodmain/kitsune.${{ matrix.binary_name }}:${{ needs.Binary.outputs.version }}