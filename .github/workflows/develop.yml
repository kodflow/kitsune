name: Go Test, PR and Auto Merge

on:
  push:
    branches:
      - develop

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4

      - name: Test
        run: make tests

      - name: Delete old PRs
        uses: actions/github-script@v4
        with:
          script: |
            const token   = "${{secrets.GH_OFA}}"
            const octokit = github.getOctokit(token);

            const { data: prs } = await octokit.pulls.list({
              owner: github.context.repo.owner,
              repo: github.context.repo.repo,
              state: 'open',
              head: 'develop'
            });

            for (const pr of prs) {
              if (pr.user.login === github.context.actor) {
                await octokit.pulls.update({
                  owner: github.context.repo.owner,
                  repo: github.context.repo.repo,
                  pull_number: pr.number,
                  state: 'closed'
                });
              }
            }

      - name: Create PR using script
        id: create_pr
        uses: actions/github-script@v4
        with:
          script: |
            const token   = "${{secrets.GH_OFA}}"
            const octokit = github.getOctokit(token);

            const response = await octokit.pulls.create({
              owner: github.context.repo.owner,
              repo: github.context.repo.repo,
              title: 'Automated PR from develop to main',
              head: 'develop',
              base: 'main'
            });
            
            console.log('PR created with number:', response.data.number);
            return response.data.number;  # Retourne le numÃ©ro de la PR
      
      - name: Approve PR
        uses: actions/github-script@v4
        with:
          script: |
            const token   = "${{secrets.GH_OFA}}"
            const octokit = github.getOctokit(token);

            const prNumber = ${{ steps.create_pr.outputs.result }};
            const isRepoOwner = github.context.actor === github.context.repo.owner;

            if (isRepoOwner) {
              await octokit.pulls.createReview({
                owner: github.context.repo.owner,
                repo: github.context.repo.repo,
                pull_number: prNumber,
                event: 'APPROVE'
              });
            }

      - name: Wait and merge PR
        uses: actions/github-script@v4
        with:
          script: |
            const token   = "${{secrets.GH_OFA}}"
            const octokit = github.getOctokit(token);

            // Get PR number from previous step
            const prNumber = ${{ steps.create_pr.outputs.result }};
            const isRepoOwner = github.context.actor === github.context.repo.owner;

            // Wait for SonarCloud checks to complete
            while (true) {
              const { data: { statuses } } = await octokit.repos.getCombinedStatusForRef({
                owner: github.context.repo.owner,
                repo: github.context.repo.repo,
                ref: `pull/${prNumber}/merge`,
              });

              const sonarCheck = statuses.find(({ context }) => context === 'SonarCloud');

              if (!sonarCheck) {
                core.setFailed('SonarCloud check not found');
                break;
              }

              if (sonarCheck.state === 'success') {
                break;
              }

              if (sonarCheck.state === 'failure') {
                core.setFailed('SonarCloud check failed');
                break;
              }

              // Sleep for 30 seconds
              await new Promise(resolve => setTimeout(resolve, 30000));
            }

            // If repo owner, merge the PR
            if (isRepoOwner) {
              await octokit.pulls.merge({
                owner: github.context.repo.owner,
                repo: github.context.repo.repo,
                pull_number: prNumber,
              });
            }